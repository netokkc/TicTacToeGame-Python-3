from IPython.display import clear_output

# create a board used for the game
def display_board(board):
        clear_output() 
        print('   | %s | | %s | | %s |'%(board[1],board[2],board[3]))        
        print('')
        print('   | %s | | %s | | %s |'%(board[4],board[5],board[6]))        
        print('')
        print('   | %s | | %s | | %s |'%(board[7],board[8],board[9]))  
        
# test the board with a list, reminding that I skipped [0] on the board. You can use either
test_board = ['#','X','O','X','O','X','O','X','O','X']
display_board(test_board)

def player_input():
    
    '''
    OUTPUT = (Player 1 marker, player 2 marker)
    This function will ask for an input of X or O and send it to the marker 
    
    '''
    
    marker = ''
    
    # IF INPUT NOT X OR O, PROGRAM WILL KEEP ASKING FOR INPUT
    
    while marker != 'X' and marker != 'O':
        marker = input('Player 1, please pick X or O: ').upper()
        
    player1 = marker
        
    if player1 == "X":
        player2 = "O"
    else:
        player2 = "X"
            
    return (player1,player2)
    
# this function is placing the Player's marker (X or O) into a position in the board based on a number input coming later in the code

def place_marker(board, marker, position):
    
    board[position] = marker
    
#testing the function inputting $ into position number 8 
place_marker(test_board,'$',8)
display_board(test_board)

'''
This function checks all possible scenario for a winning game
'''

def win_check(board,mark):
    
    # CHECK IF ALL ROWS MATCH
    return ((board[1] == mark and board[2] == mark and board[3] == mark) or
    (board[4] == mark and board[5] == mark and board[6] == mark) or
    (board[7] == mark and board[8] == mark and board[9] == mark) or
            
    # CHECK IF ALL COLLUMN MATCH
    (board[1] == mark and board[4] == mark and board[7] == mark) or    
    (board[2] == mark and board[5] == mark and board[8] == mark) or
    (board[3] == mark and board[6] == mark and board[9] == mark) or 
            
    # CHECK IF 2 DIAGONALS MATCH
    (board[1] == mark and board[5] == mark and board[9] == mark) or   
    (board[3] == mark and board[5] == mark and board[7] == mark))
    
    
# testing if output is true based on a win

display_board(test_board)
win_check(test_board,'X')

# function simulating a coin toss to decide which player will start first

import random 

def choose_first():
    
    flip = random.randint(0,1)
    
    if flip == 0:
        return 'Player 1'
    else:
        return 'Player 2'
    
    # this function checks if there is space in the board so a player can choose the next move

def space_check(board, position):
    
    return board[position] == ' '
    
# checks if the board is full and later used to decide if it is a TIE game

def full_board_check(board):
    
    for i in range(1,10):
        if space_check(board,i):
            return False
        #BOARD IS FULL
    return True
    
 '''
Receives an input (integer) and checks if there is space available for that move and if not sends
a message to choose another move
'''

def player_choice(board):
    position = 0
    
    while position not in range(1,10) or not space_check(board,position):
        position = int(input('Choose your position: (1-9)'))
    else:
        print("Choose another position")
        
    return position
    
    
    # create a function that asks players if they want to play again
def replay():
    
      return input('Do you want to play again? Enter Yes or No: ').lower().startswith('y')
 



'''
GAME PLAY FOR TIC TAC TOE

'''

print("WELCOME TO TIC TAC TOE")
print("Use the positions in board to make your moves")


# WHILE LOOP TO KEEP RUNNING GAME
while True:
    
    #PLAY THE GAME
    
    #SET EVERYTHING UP (BOARD, WHOS FIRST, CHOOSE MARKERS X or O)
    theBoard = [' ']*10
    player1_marker, player2_marker = player_input()
    
    turn = choose_first()
    print(turn + ' WILL GO FIRST')
    
    play_game = input('ARE YOU READY TO PLAY? YES OR NO?')
    
    if play_game.lower()[0] == 'y':
        game_on = True
    else:
        game_on = False
        
    
    
    #GAME PLAY
    
    while game_on:       
        if turn == "Player 1":
            
            #show the board
            display_board(theBoard)
            
            #choose a position
            position = player_choice(theBoard)
            
            # Place the marker on the position
            place_marker(theBoard,player1_marker,position)
            
            #check if the won
            if win_check(theBoard, player1_marker):
                display_board(theBoard)
                print("PLAYER 1 HAS WON!!")
                game_on = False
            
            #check if it is a tie
            else:
                if full_board_check(theBoard):
                    display_board(theBoard)
                    print("TIE GAME")
                    game_on = False
                    break
                else:
                    turn = "Player 2"
                    
        else:
            #show the board
            display_board(theBoard)
            
            #choose a position
            position = player_choice(theBoard)
            
            # Place the marker on the position
            place_marker(theBoard,player2_marker,position)
            
            #check if the won
            if win_check(theBoard, player2_marker):
                display_board(theBoard)
                print("PLAYER 2 HAS WON THE GAME!!")
                game_on = False
            else:
                if full_board_check(theBoard):
                    display_board(theBoard)
                    print("TIE GAME")
                    break
                else:
                    turn = "Player 1"
    

    if not replay(): #call function otherwise breaks the loop and stop the game
        break
